{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# The Wild Medley Problem\n",
        "\n",
        "This notebook outlines the comprehensive methods and analyses undertaken in our experiment regarding the naming of Untill.ag's lowest performing product, Wild Medley."
      ],
      "metadata": {
        "id": "2lYkVPc6FhfH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#EDA and Data Preprocessing"
      ],
      "metadata": {
        "id": "W5N2BP6RV4Ox"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 412
        },
        "id": "PJ-WXPshFevW",
        "outputId": "a9e1f818-d446-4e8e-da5e-28e4aeb68a92"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   user_id  Treatment age_group  gender   employment_status  \\\n",
              "0        1          0     55-64    Male       Self-employed   \n",
              "1        2          0     25-34  Female       Self-employed   \n",
              "2        3          0     18-24    Male             Student   \n",
              "3        4          0     25-34  Female  Employed part-time   \n",
              "4        5          0     25-34  Female  Employed full-time   \n",
              "\n",
              "                 income purchase_frequency  \\\n",
              "0      $150,000 or more              Daily   \n",
              "1  $100,000 to $149,999             Weekly   \n",
              "2     Prefer not to say             Weekly   \n",
              "3     Prefer not to say             Rarely   \n",
              "4    $75,000 to $99,999             Weekly   \n",
              "\n",
              "                       where_buy_greens  choice_freshness  choice_organic  \\\n",
              "0                       Farmers' Market                 5               3   \n",
              "1                           Supermarket                 5               3   \n",
              "2          Supermarket, Farmers' Market                 4               1   \n",
              "3                   Supermarket, Online                 5               3   \n",
              "4  Supermarket, Farmers' Market, Online                 4               4   \n",
              "\n",
              "   ...  choice_packaging  choice_brand  probability_purchase  highest_spend  \\\n",
              "0  ...                 1             1                     3             $3   \n",
              "1  ...                 2             1                     3             $3   \n",
              "2  ...                 2             1                     3             $4   \n",
              "3  ...                 5             3                     3             $3   \n",
              "4  ...                 3             3                     4             $6   \n",
              "\n",
              "  perception_freshness  perception_nutrition  perception_quality  taste_sour  \\\n",
              "0                    3                     5                   3           3   \n",
              "1                    5                     4                   5           4   \n",
              "2                    3                     4                   3           3   \n",
              "3                    4                     4                   4           4   \n",
              "4                    3                     4                   4           3   \n",
              "\n",
              "   taste_sweet  taste_spicy  \n",
              "0            1            1  \n",
              "1            2            1  \n",
              "2            3            3  \n",
              "3            1            1  \n",
              "4            4            3  \n",
              "\n",
              "[5 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-16f81829-bede-46c1-8ee9-185a8ba5943b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user_id</th>\n",
              "      <th>Treatment</th>\n",
              "      <th>age_group</th>\n",
              "      <th>gender</th>\n",
              "      <th>employment_status</th>\n",
              "      <th>income</th>\n",
              "      <th>purchase_frequency</th>\n",
              "      <th>where_buy_greens</th>\n",
              "      <th>choice_freshness</th>\n",
              "      <th>choice_organic</th>\n",
              "      <th>...</th>\n",
              "      <th>choice_packaging</th>\n",
              "      <th>choice_brand</th>\n",
              "      <th>probability_purchase</th>\n",
              "      <th>highest_spend</th>\n",
              "      <th>perception_freshness</th>\n",
              "      <th>perception_nutrition</th>\n",
              "      <th>perception_quality</th>\n",
              "      <th>taste_sour</th>\n",
              "      <th>taste_sweet</th>\n",
              "      <th>taste_spicy</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>55-64</td>\n",
              "      <td>Male</td>\n",
              "      <td>Self-employed</td>\n",
              "      <td>$150,000 or more</td>\n",
              "      <td>Daily</td>\n",
              "      <td>Farmers' Market</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>$3</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>25-34</td>\n",
              "      <td>Female</td>\n",
              "      <td>Self-employed</td>\n",
              "      <td>$100,000 to $149,999</td>\n",
              "      <td>Weekly</td>\n",
              "      <td>Supermarket</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>$3</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>18-24</td>\n",
              "      <td>Male</td>\n",
              "      <td>Student</td>\n",
              "      <td>Prefer not to say</td>\n",
              "      <td>Weekly</td>\n",
              "      <td>Supermarket, Farmers' Market</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>$4</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>25-34</td>\n",
              "      <td>Female</td>\n",
              "      <td>Employed part-time</td>\n",
              "      <td>Prefer not to say</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Supermarket, Online</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>...</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>$3</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>25-34</td>\n",
              "      <td>Female</td>\n",
              "      <td>Employed full-time</td>\n",
              "      <td>$75,000 to $99,999</td>\n",
              "      <td>Weekly</td>\n",
              "      <td>Supermarket, Farmers' Market, Online</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>...</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>$6</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 21 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-16f81829-bede-46c1-8ee9-185a8ba5943b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-16f81829-bede-46c1-8ee9-185a8ba5943b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-16f81829-bede-46c1-8ee9-185a8ba5943b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c4a59ccd-4e9d-4200-a5a2-6e196df1ff47\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c4a59ccd-4e9d-4200-a5a2-6e196df1ff47')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c4a59ccd-4e9d-4200-a5a2-6e196df1ff47 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "import pandas as pd\n",
        "data = pd.read_csv('/content/Final Untill.ag Experiment Data - Form Responses 1.csv')\n",
        "data.head()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "data['perception_freshness'].fillna(data['perception_freshness'].median(), inplace=True)\n",
        "\n",
        "missing_values_after = data.isnull().sum()\n",
        "\n",
        "missing_values_after\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5Zz0FVdQUlnV",
        "outputId": "3f530fb1-51af-42fd-cb9e-bfa7d0ce57ca"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "user_id                 0\n",
              "Treatment               0\n",
              "age_group               0\n",
              "gender                  0\n",
              "employment_status       0\n",
              "income                  0\n",
              "purchase_frequency      0\n",
              "where_buy_greens        0\n",
              "choice_freshness        0\n",
              "choice_organic          0\n",
              "choice_price            0\n",
              "choice_packaging        0\n",
              "choice_brand            0\n",
              "probability_purchase    0\n",
              "highest_spend           0\n",
              "perception_freshness    0\n",
              "perception_nutrition    0\n",
              "perception_quality      0\n",
              "taste_sour              0\n",
              "taste_sweet             0\n",
              "taste_spicy             0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "sns.set_style(\"whitegrid\")\n",
        "fig, axes = plt.subplots(2, 2, figsize=(14, 10))\n",
        "\n",
        "sns.countplot(ax=axes[0, 0], x='age_group', data=data, palette='coolwarm')\n",
        "axes[0, 0].set_title('Distribution of Responses by Age Group')\n",
        "axes[0, 0].set_xlabel('Age Group')\n",
        "axes[0, 0].set_ylabel('Count')\n",
        "\n",
        "sns.countplot(ax=axes[0, 1], x='gender', data=data, palette='coolwarm')\n",
        "axes[0, 1].set_title('Distribution of Responses by Gender')\n",
        "axes[0, 1].set_xlabel('Gender')\n",
        "axes[0, 1].set_ylabel('Count')\n",
        "\n",
        "sns.countplot(ax=axes[1, 0], x='employment_status', data=data, palette='coolwarm')\n",
        "axes[1, 0].set_title('Distribution of Responses by Employment Status')\n",
        "axes[1, 0].set_xlabel('Employment Status')\n",
        "axes[1, 0].set_ylabel('Count')\n",
        "axes[1, 0].tick_params(axis='x', rotation=45)\n",
        "\n",
        "sns.countplot(ax=axes[1, 1], x='income', data=data, palette='coolwarm')\n",
        "axes[1, 1].set_title('Distribution of Responses by Income Level')\n",
        "axes[1, 1].set_xlabel('Income Level')\n",
        "axes[1, 1].set_ylabel('Count')\n",
        "axes[1, 1].tick_params(axis='x', rotation=45)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "hvSSQxkaUrDy",
        "outputId": "d9efbd35-efe9-4c4a-ee4d-f30e2e1a91d0"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-8-2f4ee7ec4059>:7: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.countplot(ax=axes[0, 0], x='age_group', data=data, palette='coolwarm')\n",
            "<ipython-input-8-2f4ee7ec4059>:12: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.countplot(ax=axes[0, 1], x='gender', data=data, palette='coolwarm')\n",
            "<ipython-input-8-2f4ee7ec4059>:17: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.countplot(ax=axes[1, 0], x='employment_status', data=data, palette='coolwarm')\n",
            "<ipython-input-8-2f4ee7ec4059>:23: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.countplot(ax=axes[1, 1], x='income', data=data, palette='coolwarm')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x1000 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.set_style(\"whitegrid\")\n",
        "sns.countplot(x='purchase_frequency', data=data, palette='pastel')\n",
        "plt.title('Purchase Frequency of Greens')\n",
        "plt.xlabel('Frequency')\n",
        "plt.ylabel('Count')\n",
        "plt.xticks(rotation=45)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 596
        },
        "id": "hWcztZz9VFxi",
        "outputId": "62512410-fa4e-4179-8951-a51889a2be39"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-9-e83bed6b67b9>:2: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.countplot(x='purchase_frequency', data=data, palette='pastel')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "melted_data = data.melt(id_vars=['Treatment'], value_vars=['taste_sour', 'taste_spicy', 'taste_sweet'],\n",
        "                        var_name='Taste_Type', value_name='Rating')\n",
        "\n",
        "g = sns.catplot(x='Treatment', y='Rating', col='Taste_Type', data=melted_data, kind='bar',\n",
        "                height=4, aspect=1, col_wrap=2, palette='viridis')\n",
        "g.set_titles('{col_name}')\n",
        "g.fig.subplots_adjust(top=0.9)\n",
        "g.fig.suptitle('Distribution of Taste Preferences by Treatment Group')\n",
        "\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 915
        },
        "id": "Xw7080hEdjZs",
        "outputId": "12757b9d-c8c2-4c6d-ee19-e540858385c8"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-10-6c1aac4bc08c>:4: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  g = sns.catplot(x='Treatment', y='Rating', col='Taste_Type', data=melted_data, kind='bar',\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Randomization Checks"
      ],
      "metadata": {
        "id": "WdciOEjcWlwE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.stats import f_oneway\n",
        "from scipy.stats import chi2_contingency\n",
        "\n",
        "continuous_vars = ['choice_freshness', 'choice_organic', 'choice_price', 'choice_packaging', 'choice_brand']\n",
        "categorical_vars = ['age_group', 'gender', 'employment_status', 'income', 'purchase_frequency', 'where_buy_greens']\n",
        "\n",
        "anova_results = {}\n",
        "for var in continuous_vars:\n",
        "    group1 = data[data['Treatment'] == 1][var]\n",
        "    group2 = data[data['Treatment'] == 2][var]\n",
        "    group3 = data[data['Treatment'] == 3][var]\n",
        "    f_stat, p_value = f_oneway(group1, group2, group3)\n",
        "    anova_results[var] = {'F-statistic': f_stat, 'P-value': p_value}\n",
        "\n",
        "adjusted_chi2_results = {}\n",
        "for var in categorical_vars:\n",
        "    contingency_table = pd.crosstab(data[var], data['Treatment'])\n",
        "    chi2_stat, p_value, dof, expected = chi2_contingency(contingency_table)\n",
        "    adjusted_chi2_results[var] = {'Chi2-statistic': chi2_stat, 'P-value': p_value}\n",
        "\n",
        "anova_results, adjusted_chi2_results\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K8ZRr4OVWnLz",
        "outputId": "7ca1fd2e-5f0f-4290-d344-26c173d0954e"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "({'choice_freshness': {'F-statistic': 1.7072463768115937,\n",
              "   'P-value': 0.1905070636816377},\n",
              "  'choice_organic': {'F-statistic': 2.237980769230769,\n",
              "   'P-value': 0.11596621313888544},\n",
              "  'choice_price': {'F-statistic': 0.2822857142857143,\n",
              "   'P-value': 0.7551061897074293},\n",
              "  'choice_packaging': {'F-statistic': 2.712716763005781,\n",
              "   'P-value': 0.074925340433996},\n",
              "  'choice_brand': {'F-statistic': 0.7307692307692308,\n",
              "   'P-value': 0.48599471600800426}},\n",
              " {'age_group': {'Chi2-statistic': 15.485928705440902,\n",
              "   'P-value': 0.2159314568135415},\n",
              "  'gender': {'Chi2-statistic': 4.5528455284552845,\n",
              "   'P-value': 0.2076247455220674},\n",
              "  'employment_status': {'Chi2-statistic': 16.794578476551912,\n",
              "   'P-value': 0.33129213938125757},\n",
              "  'income': {'Chi2-statistic': 26.759788359788363,\n",
              "   'P-value': 0.08361249478227525},\n",
              "  'purchase_frequency': {'Chi2-statistic': 7.85025641025641,\n",
              "   'P-value': 0.7967201200316886},\n",
              "  'where_buy_greens': {'Chi2-statistic': 14.9718708963992,\n",
              "   'P-value': 0.45344530624870427}})"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The ANOVA results for continuous variables and chi-square results for categorical variables suggest that there are no statistically significant differences across the three treatment groups for these variables. This indicates effective randomization across the treatment arms, as the baseline covariates do not differ significantly between groups."
      ],
      "metadata": {
        "id": "9coKst_0Xrfs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from statsmodels.stats.power import FTestAnovaPower\n",
        "\n",
        "effect_size = 0.7\n",
        "alpha = 0.05\n",
        "power = 0.8\n",
        "n_groups = 3\n",
        "\n",
        "power_analysis = FTestAnovaPower()\n",
        "\n",
        "sample_size = power_analysis.solve_power(effect_size=effect_size, alpha=alpha, power=power, k_groups=n_groups)\n",
        "\n",
        "print(f\"Required sample size per group: {sample_size}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L6e1pVuJYB1R",
        "outputId": "5632a92b-fb16-4dfc-c3b1-d6560bd8bc63"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Required sample size per group: 22.940723773074648\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Probability of Purchase"
      ],
      "metadata": {
        "id": "KmIX_ttOPChb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from statsmodels.formula.api import ols\n",
        "import statsmodels.api as sm\n",
        "import pandas as pd\n",
        "treatment_dummies = pd.get_dummies(data['Treatment'], prefix='Treatment', drop_first=True)\n",
        "\n",
        "# Join the dummy variables with the original DataFrame\n",
        "data = data.join(treatment_dummies)\n",
        "\n",
        "\n",
        "# Now you can use these dummy variables in your regression model\n",
        "\n",
        "model_prob_purchase = ols('probability_purchase ~ Treatment_1 + Treatment_2 + Treatment_3', data=data).fit()\n",
        "model_summary = model_prob_purchase.summary()\n",
        "\n",
        "model_summary"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 494
        },
        "id": "YeYo43d4GCf1",
        "outputId": "cd7a7636-38d9-4680-f71a-c8e56593c5c1"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<class 'statsmodels.iolib.summary.Summary'>\n",
              "\"\"\"\n",
              "                             OLS Regression Results                             \n",
              "================================================================================\n",
              "Dep. Variable:     probability_purchase   R-squared:                       0.181\n",
              "Model:                              OLS   Adj. R-squared:                  0.149\n",
              "Method:                   Least Squares   F-statistic:                     5.600\n",
              "Date:                  Sun, 03 Mar 2024   Prob (F-statistic):            0.00160\n",
              "Time:                          22:28:10   Log-Likelihood:                -103.42\n",
              "No. Observations:                    80   AIC:                             214.8\n",
              "Df Residuals:                        76   BIC:                             224.4\n",
              "Df Model:                             3                                         \n",
              "Covariance Type:              nonrobust                                         \n",
              "===============================================================================\n",
              "                  coef    std err          t      P>|t|      [0.025      0.975]\n",
              "-------------------------------------------------------------------------------\n",
              "Intercept       3.0500      0.202     15.083      0.000       2.647       3.453\n",
              "Treatment_1     0.5500      0.286      1.923      0.058      -0.020       1.120\n",
              "Treatment_2     0.7500      0.286      2.623      0.011       0.180       1.320\n",
              "Treatment_3     1.1500      0.286      4.021      0.000       0.580       1.720\n",
              "==============================================================================\n",
              "Omnibus:                        4.911   Durbin-Watson:                   1.709\n",
              "Prob(Omnibus):                  0.086   Jarque-Bera (JB):                4.113\n",
              "Skew:                          -0.500   Prob(JB):                        0.128\n",
              "Kurtosis:                       3.482   Cond. No.                         4.79\n",
              "==============================================================================\n",
              "\n",
              "Notes:\n",
              "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
              "\"\"\""
            ],
            "text/html": [
              "<table class=\"simpletable\">\n",
              "<caption>OLS Regression Results</caption>\n",
              "<tr>\n",
              "  <th>Dep. Variable:</th>    <td>probability_purchase</td> <th>  R-squared:         </th> <td>   0.181</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Model:</th>                     <td>OLS</td>         <th>  Adj. R-squared:    </th> <td>   0.149</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Method:</th>               <td>Least Squares</td>    <th>  F-statistic:       </th> <td>   5.600</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Date:</th>               <td>Sun, 03 Mar 2024</td>   <th>  Prob (F-statistic):</th>  <td>0.00160</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Time:</th>                   <td>22:28:10</td>       <th>  Log-Likelihood:    </th> <td> -103.42</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>No. Observations:</th>        <td>    80</td>        <th>  AIC:               </th> <td>   214.8</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Residuals:</th>            <td>    76</td>        <th>  BIC:               </th> <td>   224.4</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Model:</th>                <td>     3</td>        <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Covariance Type:</th>        <td>nonrobust</td>      <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "       <td></td>          <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Intercept</th>   <td>    3.0500</td> <td>    0.202</td> <td>   15.083</td> <td> 0.000</td> <td>    2.647</td> <td>    3.453</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_1</th> <td>    0.5500</td> <td>    0.286</td> <td>    1.923</td> <td> 0.058</td> <td>   -0.020</td> <td>    1.120</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_2</th> <td>    0.7500</td> <td>    0.286</td> <td>    2.623</td> <td> 0.011</td> <td>    0.180</td> <td>    1.320</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_3</th> <td>    1.1500</td> <td>    0.286</td> <td>    4.021</td> <td> 0.000</td> <td>    0.580</td> <td>    1.720</td>\n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "  <th>Omnibus:</th>       <td> 4.911</td> <th>  Durbin-Watson:     </th> <td>   1.709</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(Omnibus):</th> <td> 0.086</td> <th>  Jarque-Bera (JB):  </th> <td>   4.113</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Skew:</th>          <td>-0.500</td> <th>  Prob(JB):          </th> <td>   0.128</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Kurtosis:</th>      <td> 3.482</td> <th>  Cond. No.          </th> <td>    4.79</td>\n",
              "</tr>\n",
              "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
            ],
            "text/latex": "\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}    & probability\\_purchase & \\textbf{  R-squared:         } &     0.181   \\\\\n\\textbf{Model:}            &          OLS          & \\textbf{  Adj. R-squared:    } &     0.149   \\\\\n\\textbf{Method:}           &     Least Squares     & \\textbf{  F-statistic:       } &     5.600   \\\\\n\\textbf{Date:}             &    Sun, 03 Mar 2024   & \\textbf{  Prob (F-statistic):} &  0.00160    \\\\\n\\textbf{Time:}             &        22:28:10       & \\textbf{  Log-Likelihood:    } &   -103.42   \\\\\n\\textbf{No. Observations:} &             80        & \\textbf{  AIC:               } &     214.8   \\\\\n\\textbf{Df Residuals:}     &             76        & \\textbf{  BIC:               } &     224.4   \\\\\n\\textbf{Df Model:}         &              3        & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}  &       nonrobust       & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                      & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{Intercept}    &       3.0500  &        0.202     &    15.083  &         0.000        &        2.647    &        3.453     \\\\\n\\textbf{Treatment\\_1} &       0.5500  &        0.286     &     1.923  &         0.058        &       -0.020    &        1.120     \\\\\n\\textbf{Treatment\\_2} &       0.7500  &        0.286     &     2.623  &         0.011        &        0.180    &        1.320     \\\\\n\\textbf{Treatment\\_3} &       1.1500  &        0.286     &     4.021  &         0.000        &        0.580    &        1.720     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Omnibus:}       &  4.911 & \\textbf{  Durbin-Watson:     } &    1.709  \\\\\n\\textbf{Prob(Omnibus):} &  0.086 & \\textbf{  Jarque-Bera (JB):  } &    4.113  \\\\\n\\textbf{Skew:}          & -0.500 & \\textbf{  Prob(JB):          } &    0.128  \\\\\n\\textbf{Kurtosis:}      &  3.482 & \\textbf{  Cond. No.          } &     4.79  \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{OLS Regression Results}\n\\end{center}\n\nNotes: \\newline\n [1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import statsmodels.formula.api as smf\n",
        "import pandas as pd\n",
        "\n",
        "formula = 'probability_purchase ~ Treatment_1 + Treatment_2 + Treatment_3 + age_group + gender + employment_status + income + purchase_frequency'\n",
        "model = smf.ols(formula=formula, data=data).fit()\n",
        "\n",
        "print(model.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "788WJYy8L-2u",
        "outputId": "7884e43c-a530-4392-c8f4-119d0f36835f"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                             OLS Regression Results                             \n",
            "================================================================================\n",
            "Dep. Variable:     probability_purchase   R-squared:                       0.431\n",
            "Model:                              OLS   Adj. R-squared:                  0.197\n",
            "Method:                   Least Squares   F-statistic:                     1.843\n",
            "Date:                  Sun, 03 Mar 2024   Prob (F-statistic):             0.0323\n",
            "Time:                          22:28:10   Log-Likelihood:                -88.856\n",
            "No. Observations:                    80   AIC:                             225.7\n",
            "Df Residuals:                        56   BIC:                             282.9\n",
            "Df Model:                            23                                         \n",
            "Covariance Type:              nonrobust                                         \n",
            "===========================================================================================================\n",
            "                                              coef    std err          t      P>|t|      [0.025      0.975]\n",
            "-----------------------------------------------------------------------------------------------------------\n",
            "Intercept                                   1.6612      1.656      1.003      0.320      -1.657       4.979\n",
            "age_group[T.25-34]                         -0.0406      0.257     -0.158      0.875      -0.556       0.474\n",
            "age_group[T.35-44]                          0.0141      0.551      0.026      0.980      -1.090       1.118\n",
            "age_group[T.45-54]                          0.2329      0.640      0.364      0.717      -1.049       1.515\n",
            "age_group[T.55-64]                         -0.9935      0.501     -1.984      0.052      -1.996       0.010\n",
            "gender[T.Male]                              0.0685      0.221      0.310      0.758      -0.374       0.511\n",
            "employment_status[T.Employed part-time]     0.0982      0.531      0.185      0.854      -0.966       1.163\n",
            "employment_status[T.Prefer not to say]      0.1804      0.971      0.186      0.853      -1.766       2.126\n",
            "employment_status[T.Self-employed]          0.4550      1.004      0.453      0.652      -1.556       2.466\n",
            "employment_status[T.Student]                0.0642      0.299      0.215      0.831      -0.535       0.663\n",
            "employment_status[T.Unemployed]             0.7281      0.401      1.814      0.075      -0.076       1.532\n",
            "income[T.$150,000 or more]                  1.8088      0.648      2.790      0.007       0.510       3.107\n",
            "income[T.$25,000 to $49,999]                0.6688      0.671      0.996      0.323      -0.676       2.014\n",
            "income[T.$50,000 to $74,999]                0.2243      0.542      0.414      0.681      -0.862       1.310\n",
            "income[T.$75,000 to $99,999]                0.9132      0.480      1.904      0.062      -0.048       1.874\n",
            "income[T.Prefer not to say]                 0.5865      0.466      1.259      0.213      -0.347       1.520\n",
            "income[T.Under $25,000]                     0.5578      0.469      1.190      0.239      -0.381       1.496\n",
            "purchase_frequency[T.Monthly]               0.5070      1.493      0.340      0.735      -2.484       3.498\n",
            "purchase_frequency[T.Never]                -0.5975      1.496     -0.399      0.691      -3.594       2.399\n",
            "purchase_frequency[T.Rarely]                0.4726      1.516      0.312      0.756      -2.563       3.509\n",
            "purchase_frequency[T.Weekly]                0.9245      1.470      0.629      0.532      -2.020       3.869\n",
            "Treatment_1                                 0.5790      0.314      1.841      0.071      -0.051       1.209\n",
            "Treatment_2                                 0.9147      0.319      2.864      0.006       0.275       1.555\n",
            "Treatment_3                                 1.1477      0.349      3.285      0.002       0.448       1.848\n",
            "==============================================================================\n",
            "Omnibus:                        3.900   Durbin-Watson:                   1.820\n",
            "Prob(Omnibus):                  0.142   Jarque-Bera (JB):                3.104\n",
            "Skew:                          -0.420   Prob(JB):                        0.212\n",
            "Kurtosis:                       3.477   Cond. No.                         53.2\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Highest Spend"
      ],
      "metadata": {
        "id": "oy4BndF4PHDT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data['highest_spend'] = data['highest_spend'].replace('[\\$,]', '', regex=True).astype(float)\n",
        "model_highest_spend = ols('highest_spend ~ Treatment_1 + Treatment_2 + Treatment_3', data=data).fit()\n",
        "model_2_summary = model_highest_spend.summary()\n",
        "\n",
        "model_2_summary\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 494
        },
        "id": "WXql3M5KHY8M",
        "outputId": "50b04095-53fe-44ec-e31c-756bfe1bb245"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<class 'statsmodels.iolib.summary.Summary'>\n",
              "\"\"\"\n",
              "                            OLS Regression Results                            \n",
              "==============================================================================\n",
              "Dep. Variable:          highest_spend   R-squared:                       0.240\n",
              "Model:                            OLS   Adj. R-squared:                  0.210\n",
              "Method:                 Least Squares   F-statistic:                     8.008\n",
              "Date:                Sun, 03 Mar 2024   Prob (F-statistic):           0.000105\n",
              "Time:                        22:28:10   Log-Likelihood:                -138.69\n",
              "No. Observations:                  80   AIC:                             285.4\n",
              "Df Residuals:                      76   BIC:                             294.9\n",
              "Df Model:                           3                                         \n",
              "Covariance Type:            nonrobust                                         \n",
              "===============================================================================\n",
              "                  coef    std err          t      P>|t|      [0.025      0.975]\n",
              "-------------------------------------------------------------------------------\n",
              "Intercept       3.6000      0.314     11.456      0.000       2.974       4.226\n",
              "Treatment_1    -0.3500      0.444     -0.788      0.433      -1.235       0.535\n",
              "Treatment_2     1.1500      0.444      2.588      0.012       0.265       2.035\n",
              "Treatment_3     1.5000      0.444      3.375      0.001       0.615       2.385\n",
              "==============================================================================\n",
              "Omnibus:                        2.029   Durbin-Watson:                   2.167\n",
              "Prob(Omnibus):                  0.363   Jarque-Bera (JB):                2.021\n",
              "Skew:                           0.334   Prob(JB):                        0.364\n",
              "Kurtosis:                       2.598   Cond. No.                         4.79\n",
              "==============================================================================\n",
              "\n",
              "Notes:\n",
              "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
              "\"\"\""
            ],
            "text/html": [
              "<table class=\"simpletable\">\n",
              "<caption>OLS Regression Results</caption>\n",
              "<tr>\n",
              "  <th>Dep. Variable:</th>      <td>highest_spend</td>  <th>  R-squared:         </th> <td>   0.240</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.210</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   8.008</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Date:</th>             <td>Sun, 03 Mar 2024</td> <th>  Prob (F-statistic):</th> <td>0.000105</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Time:</th>                 <td>22:28:10</td>     <th>  Log-Likelihood:    </th> <td> -138.69</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>No. Observations:</th>      <td>    80</td>      <th>  AIC:               </th> <td>   285.4</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Residuals:</th>          <td>    76</td>      <th>  BIC:               </th> <td>   294.9</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Model:</th>              <td>     3</td>      <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "       <td></td>          <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Intercept</th>   <td>    3.6000</td> <td>    0.314</td> <td>   11.456</td> <td> 0.000</td> <td>    2.974</td> <td>    4.226</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_1</th> <td>   -0.3500</td> <td>    0.444</td> <td>   -0.788</td> <td> 0.433</td> <td>   -1.235</td> <td>    0.535</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_2</th> <td>    1.1500</td> <td>    0.444</td> <td>    2.588</td> <td> 0.012</td> <td>    0.265</td> <td>    2.035</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_3</th> <td>    1.5000</td> <td>    0.444</td> <td>    3.375</td> <td> 0.001</td> <td>    0.615</td> <td>    2.385</td>\n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "  <th>Omnibus:</th>       <td> 2.029</td> <th>  Durbin-Watson:     </th> <td>   2.167</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(Omnibus):</th> <td> 0.363</td> <th>  Jarque-Bera (JB):  </th> <td>   2.021</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Skew:</th>          <td> 0.334</td> <th>  Prob(JB):          </th> <td>   0.364</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Kurtosis:</th>      <td> 2.598</td> <th>  Cond. No.          </th> <td>    4.79</td>\n",
              "</tr>\n",
              "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
            ],
            "text/latex": "\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}    &  highest\\_spend  & \\textbf{  R-squared:         } &     0.240   \\\\\n\\textbf{Model:}            &       OLS        & \\textbf{  Adj. R-squared:    } &     0.210   \\\\\n\\textbf{Method:}           &  Least Squares   & \\textbf{  F-statistic:       } &     8.008   \\\\\n\\textbf{Date:}             & Sun, 03 Mar 2024 & \\textbf{  Prob (F-statistic):} &  0.000105   \\\\\n\\textbf{Time:}             &     22:28:10     & \\textbf{  Log-Likelihood:    } &   -138.69   \\\\\n\\textbf{No. Observations:} &          80      & \\textbf{  AIC:               } &     285.4   \\\\\n\\textbf{Df Residuals:}     &          76      & \\textbf{  BIC:               } &     294.9   \\\\\n\\textbf{Df Model:}         &           3      & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}  &    nonrobust     & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                      & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{Intercept}    &       3.6000  &        0.314     &    11.456  &         0.000        &        2.974    &        4.226     \\\\\n\\textbf{Treatment\\_1} &      -0.3500  &        0.444     &    -0.788  &         0.433        &       -1.235    &        0.535     \\\\\n\\textbf{Treatment\\_2} &       1.1500  &        0.444     &     2.588  &         0.012        &        0.265    &        2.035     \\\\\n\\textbf{Treatment\\_3} &       1.5000  &        0.444     &     3.375  &         0.001        &        0.615    &        2.385     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Omnibus:}       &  2.029 & \\textbf{  Durbin-Watson:     } &    2.167  \\\\\n\\textbf{Prob(Omnibus):} &  0.363 & \\textbf{  Jarque-Bera (JB):  } &    2.021  \\\\\n\\textbf{Skew:}          &  0.334 & \\textbf{  Prob(JB):          } &    0.364  \\\\\n\\textbf{Kurtosis:}      &  2.598 & \\textbf{  Cond. No.          } &     4.79  \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{OLS Regression Results}\n\\end{center}\n\nNotes: \\newline\n [1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model_highest_spend_covariates = ols('highest_spend ~ Treatment_1 + Treatment_2 + Treatment_3 + age_group + gender + income + purchase_frequency + where_buy_greens + choice_price', data=data).fit()\n",
        "model_2b_summary = model_highest_spend_covariates.summary()\n",
        "\n",
        "model_2b_summary\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 943
        },
        "id": "dWfh_79YOgU3",
        "outputId": "b93ccea1-d837-4649-ae82-a1e5078115fc"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<class 'statsmodels.iolib.summary.Summary'>\n",
              "\"\"\"\n",
              "                            OLS Regression Results                            \n",
              "==============================================================================\n",
              "Dep. Variable:          highest_spend   R-squared:                       0.493\n",
              "Model:                            OLS   Adj. R-squared:                  0.272\n",
              "Method:                 Least Squares   F-statistic:                     2.230\n",
              "Date:                Sun, 03 Mar 2024   Prob (F-statistic):            0.00727\n",
              "Time:                        22:28:10   Log-Likelihood:                -122.49\n",
              "No. Observations:                  80   AIC:                             295.0\n",
              "Df Residuals:                      55   BIC:                             354.5\n",
              "Df Model:                          24                                         \n",
              "Covariance Type:            nonrobust                                         \n",
              "============================================================================================================================\n",
              "                                                               coef    std err          t      P>|t|      [0.025      0.975]\n",
              "----------------------------------------------------------------------------------------------------------------------------\n",
              "Intercept                                                   -0.2281      2.043     -0.112      0.911      -4.322       3.866\n",
              "age_group[T.25-34]                                           0.5935      0.402      1.476      0.146      -0.212       1.399\n",
              "age_group[T.35-44]                                           0.1356      0.845      0.160      0.873      -1.557       1.829\n",
              "age_group[T.45-54]                                           1.8255      0.992      1.840      0.071      -0.162       3.813\n",
              "age_group[T.55-64]                                           2.1069      0.762      2.765      0.008       0.580       3.634\n",
              "gender[T.Male]                                               0.2353      0.370      0.636      0.527      -0.506       0.977\n",
              "income[T.$150,000 or more]                                   0.8738      1.006      0.869      0.389      -1.142       2.889\n",
              "income[T.$25,000 to $49,999]                                 0.4752      1.025      0.463      0.645      -1.580       2.530\n",
              "income[T.$50,000 to $74,999]                                 0.3846      0.879      0.437      0.664      -1.378       2.147\n",
              "income[T.$75,000 to $99,999]                                 1.2858      0.745      1.726      0.090      -0.207       2.778\n",
              "income[T.Prefer not to say]                                  0.1109      0.656      0.169      0.866      -1.203       1.425\n",
              "income[T.Under $25,000]                                      0.3181      0.640      0.497      0.621      -0.965       1.601\n",
              "purchase_frequency[T.Monthly]                                1.2463      2.087      0.597      0.553      -2.937       5.429\n",
              "purchase_frequency[T.Never]                                 -1.7210      2.084     -0.826      0.412      -5.897       2.455\n",
              "purchase_frequency[T.Rarely]                                 1.3696      2.175      0.630      0.531      -2.989       5.728\n",
              "purchase_frequency[T.Weekly]                                 1.3588      2.082      0.653      0.517      -2.813       5.530\n",
              "where_buy_greens[T.Online]                                   3.1613      1.511      2.092      0.041       0.133       6.190\n",
              "where_buy_greens[T.Supermarket]                              1.5376      1.139      1.350      0.183      -0.745       3.821\n",
              "where_buy_greens[T.Supermarket, Farmers' Market]             1.3989      1.245      1.123      0.266      -1.097       3.895\n",
              "where_buy_greens[T.Supermarket, Farmers' Market, Online]     2.2798      1.475      1.546      0.128      -0.676       5.235\n",
              "where_buy_greens[T.Supermarket, Online]                      1.4919      1.150      1.297      0.200      -0.813       3.796\n",
              "Treatment_1                                                 -0.0466      0.460     -0.101      0.920      -0.969       0.876\n",
              "Treatment_2                                                  1.1734      0.489      2.402      0.020       0.194       2.153\n",
              "Treatment_3                                                  1.7515      0.524      3.341      0.002       0.701       2.802\n",
              "choice_price                                                 0.0040      0.222      0.018      0.986      -0.440       0.448\n",
              "==============================================================================\n",
              "Omnibus:                        6.348   Durbin-Watson:                   1.864\n",
              "Prob(Omnibus):                  0.042   Jarque-Bera (JB):                5.904\n",
              "Skew:                           0.501   Prob(JB):                       0.0522\n",
              "Kurtosis:                       3.875   Cond. No.                         134.\n",
              "==============================================================================\n",
              "\n",
              "Notes:\n",
              "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
              "\"\"\""
            ],
            "text/html": [
              "<table class=\"simpletable\">\n",
              "<caption>OLS Regression Results</caption>\n",
              "<tr>\n",
              "  <th>Dep. Variable:</th>      <td>highest_spend</td>  <th>  R-squared:         </th> <td>   0.493</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.272</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   2.230</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Date:</th>             <td>Sun, 03 Mar 2024</td> <th>  Prob (F-statistic):</th>  <td>0.00727</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Time:</th>                 <td>22:28:10</td>     <th>  Log-Likelihood:    </th> <td> -122.49</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>No. Observations:</th>      <td>    80</td>      <th>  AIC:               </th> <td>   295.0</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Residuals:</th>          <td>    55</td>      <th>  BIC:               </th> <td>   354.5</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Model:</th>              <td>    24</td>      <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "                              <td></td>                                <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Intercept</th>                                                <td>   -0.2281</td> <td>    2.043</td> <td>   -0.112</td> <td> 0.911</td> <td>   -4.322</td> <td>    3.866</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>age_group[T.25-34]</th>                                       <td>    0.5935</td> <td>    0.402</td> <td>    1.476</td> <td> 0.146</td> <td>   -0.212</td> <td>    1.399</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>age_group[T.35-44]</th>                                       <td>    0.1356</td> <td>    0.845</td> <td>    0.160</td> <td> 0.873</td> <td>   -1.557</td> <td>    1.829</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>age_group[T.45-54]</th>                                       <td>    1.8255</td> <td>    0.992</td> <td>    1.840</td> <td> 0.071</td> <td>   -0.162</td> <td>    3.813</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>age_group[T.55-64]</th>                                       <td>    2.1069</td> <td>    0.762</td> <td>    2.765</td> <td> 0.008</td> <td>    0.580</td> <td>    3.634</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>gender[T.Male]</th>                                           <td>    0.2353</td> <td>    0.370</td> <td>    0.636</td> <td> 0.527</td> <td>   -0.506</td> <td>    0.977</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>income[T.$150,000 or more]</th>                               <td>    0.8738</td> <td>    1.006</td> <td>    0.869</td> <td> 0.389</td> <td>   -1.142</td> <td>    2.889</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>income[T.$25,000 to $49,999]</th>                             <td>    0.4752</td> <td>    1.025</td> <td>    0.463</td> <td> 0.645</td> <td>   -1.580</td> <td>    2.530</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>income[T.$50,000 to $74,999]</th>                             <td>    0.3846</td> <td>    0.879</td> <td>    0.437</td> <td> 0.664</td> <td>   -1.378</td> <td>    2.147</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>income[T.$75,000 to $99,999]</th>                             <td>    1.2858</td> <td>    0.745</td> <td>    1.726</td> <td> 0.090</td> <td>   -0.207</td> <td>    2.778</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>income[T.Prefer not to say]</th>                              <td>    0.1109</td> <td>    0.656</td> <td>    0.169</td> <td> 0.866</td> <td>   -1.203</td> <td>    1.425</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>income[T.Under $25,000]</th>                                  <td>    0.3181</td> <td>    0.640</td> <td>    0.497</td> <td> 0.621</td> <td>   -0.965</td> <td>    1.601</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>purchase_frequency[T.Monthly]</th>                            <td>    1.2463</td> <td>    2.087</td> <td>    0.597</td> <td> 0.553</td> <td>   -2.937</td> <td>    5.429</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>purchase_frequency[T.Never]</th>                              <td>   -1.7210</td> <td>    2.084</td> <td>   -0.826</td> <td> 0.412</td> <td>   -5.897</td> <td>    2.455</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>purchase_frequency[T.Rarely]</th>                             <td>    1.3696</td> <td>    2.175</td> <td>    0.630</td> <td> 0.531</td> <td>   -2.989</td> <td>    5.728</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>purchase_frequency[T.Weekly]</th>                             <td>    1.3588</td> <td>    2.082</td> <td>    0.653</td> <td> 0.517</td> <td>   -2.813</td> <td>    5.530</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>where_buy_greens[T.Online]</th>                               <td>    3.1613</td> <td>    1.511</td> <td>    2.092</td> <td> 0.041</td> <td>    0.133</td> <td>    6.190</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>where_buy_greens[T.Supermarket]</th>                          <td>    1.5376</td> <td>    1.139</td> <td>    1.350</td> <td> 0.183</td> <td>   -0.745</td> <td>    3.821</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>where_buy_greens[T.Supermarket, Farmers' Market]</th>         <td>    1.3989</td> <td>    1.245</td> <td>    1.123</td> <td> 0.266</td> <td>   -1.097</td> <td>    3.895</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>where_buy_greens[T.Supermarket, Farmers' Market, Online]</th> <td>    2.2798</td> <td>    1.475</td> <td>    1.546</td> <td> 0.128</td> <td>   -0.676</td> <td>    5.235</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>where_buy_greens[T.Supermarket, Online]</th>                  <td>    1.4919</td> <td>    1.150</td> <td>    1.297</td> <td> 0.200</td> <td>   -0.813</td> <td>    3.796</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_1</th>                                              <td>   -0.0466</td> <td>    0.460</td> <td>   -0.101</td> <td> 0.920</td> <td>   -0.969</td> <td>    0.876</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_2</th>                                              <td>    1.1734</td> <td>    0.489</td> <td>    2.402</td> <td> 0.020</td> <td>    0.194</td> <td>    2.153</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_3</th>                                              <td>    1.7515</td> <td>    0.524</td> <td>    3.341</td> <td> 0.002</td> <td>    0.701</td> <td>    2.802</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>choice_price</th>                                             <td>    0.0040</td> <td>    0.222</td> <td>    0.018</td> <td> 0.986</td> <td>   -0.440</td> <td>    0.448</td>\n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "  <th>Omnibus:</th>       <td> 6.348</td> <th>  Durbin-Watson:     </th> <td>   1.864</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(Omnibus):</th> <td> 0.042</td> <th>  Jarque-Bera (JB):  </th> <td>   5.904</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Skew:</th>          <td> 0.501</td> <th>  Prob(JB):          </th> <td>  0.0522</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Kurtosis:</th>      <td> 3.875</td> <th>  Cond. No.          </th> <td>    134.</td>\n",
              "</tr>\n",
              "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
            ],
            "text/latex": "\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}                                             &  highest\\_spend  & \\textbf{  R-squared:         } &     0.493   \\\\\n\\textbf{Model:}                                                     &       OLS        & \\textbf{  Adj. R-squared:    } &     0.272   \\\\\n\\textbf{Method:}                                                    &  Least Squares   & \\textbf{  F-statistic:       } &     2.230   \\\\\n\\textbf{Date:}                                                      & Sun, 03 Mar 2024 & \\textbf{  Prob (F-statistic):} &  0.00727    \\\\\n\\textbf{Time:}                                                      &     22:28:10     & \\textbf{  Log-Likelihood:    } &   -122.49   \\\\\n\\textbf{No. Observations:}                                          &          80      & \\textbf{  AIC:               } &     295.0   \\\\\n\\textbf{Df Residuals:}                                              &          55      & \\textbf{  BIC:               } &     354.5   \\\\\n\\textbf{Df Model:}                                                  &          24      & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}                                           &    nonrobust     & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                                                                    & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{Intercept}                                                  &      -0.2281  &        2.043     &    -0.112  &         0.911        &       -4.322    &        3.866     \\\\\n\\textbf{age\\_group[T.25-34]}                                        &       0.5935  &        0.402     &     1.476  &         0.146        &       -0.212    &        1.399     \\\\\n\\textbf{age\\_group[T.35-44]}                                        &       0.1356  &        0.845     &     0.160  &         0.873        &       -1.557    &        1.829     \\\\\n\\textbf{age\\_group[T.45-54]}                                        &       1.8255  &        0.992     &     1.840  &         0.071        &       -0.162    &        3.813     \\\\\n\\textbf{age\\_group[T.55-64]}                                        &       2.1069  &        0.762     &     2.765  &         0.008        &        0.580    &        3.634     \\\\\n\\textbf{gender[T.Male]}                                             &       0.2353  &        0.370     &     0.636  &         0.527        &       -0.506    &        0.977     \\\\\n\\textbf{income[T.\\$150,000 or more]}                                &       0.8738  &        1.006     &     0.869  &         0.389        &       -1.142    &        2.889     \\\\\n\\textbf{income[T.\\$25,000 to \\$49,999]}                             &       0.4752  &        1.025     &     0.463  &         0.645        &       -1.580    &        2.530     \\\\\n\\textbf{income[T.\\$50,000 to \\$74,999]}                             &       0.3846  &        0.879     &     0.437  &         0.664        &       -1.378    &        2.147     \\\\\n\\textbf{income[T.\\$75,000 to \\$99,999]}                             &       1.2858  &        0.745     &     1.726  &         0.090        &       -0.207    &        2.778     \\\\\n\\textbf{income[T.Prefer not to say]}                                &       0.1109  &        0.656     &     0.169  &         0.866        &       -1.203    &        1.425     \\\\\n\\textbf{income[T.Under \\$25,000]}                                   &       0.3181  &        0.640     &     0.497  &         0.621        &       -0.965    &        1.601     \\\\\n\\textbf{purchase\\_frequency[T.Monthly]}                             &       1.2463  &        2.087     &     0.597  &         0.553        &       -2.937    &        5.429     \\\\\n\\textbf{purchase\\_frequency[T.Never]}                               &      -1.7210  &        2.084     &    -0.826  &         0.412        &       -5.897    &        2.455     \\\\\n\\textbf{purchase\\_frequency[T.Rarely]}                              &       1.3696  &        2.175     &     0.630  &         0.531        &       -2.989    &        5.728     \\\\\n\\textbf{purchase\\_frequency[T.Weekly]}                              &       1.3588  &        2.082     &     0.653  &         0.517        &       -2.813    &        5.530     \\\\\n\\textbf{where\\_buy\\_greens[T.Online]}                               &       3.1613  &        1.511     &     2.092  &         0.041        &        0.133    &        6.190     \\\\\n\\textbf{where\\_buy\\_greens[T.Supermarket]}                          &       1.5376  &        1.139     &     1.350  &         0.183        &       -0.745    &        3.821     \\\\\n\\textbf{where\\_buy\\_greens[T.Supermarket, Farmers' Market]}         &       1.3989  &        1.245     &     1.123  &         0.266        &       -1.097    &        3.895     \\\\\n\\textbf{where\\_buy\\_greens[T.Supermarket, Farmers' Market, Online]} &       2.2798  &        1.475     &     1.546  &         0.128        &       -0.676    &        5.235     \\\\\n\\textbf{where\\_buy\\_greens[T.Supermarket, Online]}                  &       1.4919  &        1.150     &     1.297  &         0.200        &       -0.813    &        3.796     \\\\\n\\textbf{Treatment\\_1}                                               &      -0.0466  &        0.460     &    -0.101  &         0.920        &       -0.969    &        0.876     \\\\\n\\textbf{Treatment\\_2}                                               &       1.1734  &        0.489     &     2.402  &         0.020        &        0.194    &        2.153     \\\\\n\\textbf{Treatment\\_3}                                               &       1.7515  &        0.524     &     3.341  &         0.002        &        0.701    &        2.802     \\\\\n\\textbf{choice\\_price}                                              &       0.0040  &        0.222     &     0.018  &         0.986        &       -0.440    &        0.448     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Omnibus:}       &  6.348 & \\textbf{  Durbin-Watson:     } &    1.864  \\\\\n\\textbf{Prob(Omnibus):} &  0.042 & \\textbf{  Jarque-Bera (JB):  } &    5.904  \\\\\n\\textbf{Skew:}          &  0.501 & \\textbf{  Prob(JB):          } &   0.0522  \\\\\n\\textbf{Kurtosis:}      &  3.875 & \\textbf{  Cond. No.          } &     134.  \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{OLS Regression Results}\n\\end{center}\n\nNotes: \\newline\n [1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Perception of Freshness"
      ],
      "metadata": {
        "id": "oV7k6wj4Phnt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model_freshness = ols('perception_freshness ~ Treatment_1 + Treatment_2 + Treatment_3', data=data).fit()\n",
        "model_3_summary = model_freshness.summary()\n",
        "\n",
        "model_3_summary"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 494
        },
        "id": "UdJTGawqIaZ6",
        "outputId": "e6ee546a-d94b-4842-ae6b-101a3f93dc19"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<class 'statsmodels.iolib.summary.Summary'>\n",
              "\"\"\"\n",
              "                             OLS Regression Results                             \n",
              "================================================================================\n",
              "Dep. Variable:     perception_freshness   R-squared:                       0.020\n",
              "Model:                              OLS   Adj. R-squared:                 -0.018\n",
              "Method:                   Least Squares   F-statistic:                    0.5266\n",
              "Date:                  Sun, 03 Mar 2024   Prob (F-statistic):              0.665\n",
              "Time:                          22:28:10   Log-Likelihood:                -88.960\n",
              "No. Observations:                    80   AIC:                             185.9\n",
              "Df Residuals:                        76   BIC:                             195.4\n",
              "Df Model:                             3                                         \n",
              "Covariance Type:              nonrobust                                         \n",
              "===============================================================================\n",
              "                  coef    std err          t      P>|t|      [0.025      0.975]\n",
              "-------------------------------------------------------------------------------\n",
              "Intercept       3.7000      0.169     21.922      0.000       3.364       4.036\n",
              "Treatment_1     0.1500      0.239      0.628      0.532      -0.325       0.625\n",
              "Treatment_2     0.1500      0.239      0.628      0.532      -0.325       0.625\n",
              "Treatment_3     0.3000      0.239      1.257      0.213      -0.175       0.775\n",
              "==============================================================================\n",
              "Omnibus:                       15.172   Durbin-Watson:                   2.188\n",
              "Prob(Omnibus):                  0.001   Jarque-Bera (JB):                4.931\n",
              "Skew:                           0.287   Prob(JB):                       0.0850\n",
              "Kurtosis:                       1.928   Cond. No.                         4.79\n",
              "==============================================================================\n",
              "\n",
              "Notes:\n",
              "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
              "\"\"\""
            ],
            "text/html": [
              "<table class=\"simpletable\">\n",
              "<caption>OLS Regression Results</caption>\n",
              "<tr>\n",
              "  <th>Dep. Variable:</th>    <td>perception_freshness</td> <th>  R-squared:         </th> <td>   0.020</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Model:</th>                     <td>OLS</td>         <th>  Adj. R-squared:    </th> <td>  -0.018</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Method:</th>               <td>Least Squares</td>    <th>  F-statistic:       </th> <td>  0.5266</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Date:</th>               <td>Sun, 03 Mar 2024</td>   <th>  Prob (F-statistic):</th>  <td> 0.665</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Time:</th>                   <td>22:28:10</td>       <th>  Log-Likelihood:    </th> <td> -88.960</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>No. Observations:</th>        <td>    80</td>        <th>  AIC:               </th> <td>   185.9</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Residuals:</th>            <td>    76</td>        <th>  BIC:               </th> <td>   195.4</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Model:</th>                <td>     3</td>        <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Covariance Type:</th>        <td>nonrobust</td>      <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "       <td></td>          <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Intercept</th>   <td>    3.7000</td> <td>    0.169</td> <td>   21.922</td> <td> 0.000</td> <td>    3.364</td> <td>    4.036</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_1</th> <td>    0.1500</td> <td>    0.239</td> <td>    0.628</td> <td> 0.532</td> <td>   -0.325</td> <td>    0.625</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_2</th> <td>    0.1500</td> <td>    0.239</td> <td>    0.628</td> <td> 0.532</td> <td>   -0.325</td> <td>    0.625</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_3</th> <td>    0.3000</td> <td>    0.239</td> <td>    1.257</td> <td> 0.213</td> <td>   -0.175</td> <td>    0.775</td>\n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "  <th>Omnibus:</th>       <td>15.172</td> <th>  Durbin-Watson:     </th> <td>   2.188</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(Omnibus):</th> <td> 0.001</td> <th>  Jarque-Bera (JB):  </th> <td>   4.931</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Skew:</th>          <td> 0.287</td> <th>  Prob(JB):          </th> <td>  0.0850</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Kurtosis:</th>      <td> 1.928</td> <th>  Cond. No.          </th> <td>    4.79</td>\n",
              "</tr>\n",
              "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
            ],
            "text/latex": "\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}    & perception\\_freshness & \\textbf{  R-squared:         } &     0.020   \\\\\n\\textbf{Model:}            &          OLS          & \\textbf{  Adj. R-squared:    } &    -0.018   \\\\\n\\textbf{Method:}           &     Least Squares     & \\textbf{  F-statistic:       } &    0.5266   \\\\\n\\textbf{Date:}             &    Sun, 03 Mar 2024   & \\textbf{  Prob (F-statistic):} &    0.665    \\\\\n\\textbf{Time:}             &        22:28:10       & \\textbf{  Log-Likelihood:    } &   -88.960   \\\\\n\\textbf{No. Observations:} &             80        & \\textbf{  AIC:               } &     185.9   \\\\\n\\textbf{Df Residuals:}     &             76        & \\textbf{  BIC:               } &     195.4   \\\\\n\\textbf{Df Model:}         &              3        & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}  &       nonrobust       & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                      & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{Intercept}    &       3.7000  &        0.169     &    21.922  &         0.000        &        3.364    &        4.036     \\\\\n\\textbf{Treatment\\_1} &       0.1500  &        0.239     &     0.628  &         0.532        &       -0.325    &        0.625     \\\\\n\\textbf{Treatment\\_2} &       0.1500  &        0.239     &     0.628  &         0.532        &       -0.325    &        0.625     \\\\\n\\textbf{Treatment\\_3} &       0.3000  &        0.239     &     1.257  &         0.213        &       -0.175    &        0.775     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Omnibus:}       & 15.172 & \\textbf{  Durbin-Watson:     } &    2.188  \\\\\n\\textbf{Prob(Omnibus):} &  0.001 & \\textbf{  Jarque-Bera (JB):  } &    4.931  \\\\\n\\textbf{Skew:}          &  0.287 & \\textbf{  Prob(JB):          } &   0.0850  \\\\\n\\textbf{Kurtosis:}      &  1.928 & \\textbf{  Cond. No.          } &     4.79  \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{OLS Regression Results}\n\\end{center}\n\nNotes: \\newline\n [1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model_freshness_covariates = ols('perception_freshness ~ Treatment_1 + Treatment_2 + Treatment_3 + choice_freshness + age_group', data=data).fit()\n",
        "model_3b_summary = model_freshness_covariates.summary()\n",
        "\n",
        "model_3b_summary"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 601
        },
        "id": "nz28k3c-PtxE",
        "outputId": "9ad638ed-f193-4746-fd4c-82bdcd2269d8"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<class 'statsmodels.iolib.summary.Summary'>\n",
              "\"\"\"\n",
              "                             OLS Regression Results                             \n",
              "================================================================================\n",
              "Dep. Variable:     perception_freshness   R-squared:                       0.080\n",
              "Model:                              OLS   Adj. R-squared:                 -0.023\n",
              "Method:                   Least Squares   F-statistic:                    0.7756\n",
              "Date:                  Sun, 03 Mar 2024   Prob (F-statistic):              0.625\n",
              "Time:                          22:28:10   Log-Likelihood:                -86.432\n",
              "No. Observations:                    80   AIC:                             190.9\n",
              "Df Residuals:                        71   BIC:                             212.3\n",
              "Df Model:                             8                                         \n",
              "Covariance Type:              nonrobust                                         \n",
              "======================================================================================\n",
              "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
              "--------------------------------------------------------------------------------------\n",
              "Intercept              3.7474      0.537      6.975      0.000       2.676       4.819\n",
              "age_group[T.25-34]     0.0847      0.200      0.423      0.674      -0.315       0.484\n",
              "age_group[T.35-44]    -0.4278      0.400     -1.069      0.289      -1.226       0.370\n",
              "age_group[T.45-54]     0.3900      0.466      0.838      0.405      -0.538       1.318\n",
              "age_group[T.55-64]    -0.4727      0.352     -1.342      0.184      -1.175       0.230\n",
              "Treatment_1            0.0964      0.244      0.394      0.694      -0.391       0.583\n",
              "Treatment_2            0.1430      0.245      0.584      0.561      -0.346       0.632\n",
              "Treatment_3            0.2538      0.260      0.978      0.332      -0.264       0.771\n",
              "choice_freshness      -0.0013      0.104     -0.013      0.990      -0.208       0.205\n",
              "==============================================================================\n",
              "Omnibus:                       11.599   Durbin-Watson:                   2.141\n",
              "Prob(Omnibus):                  0.003   Jarque-Bera (JB):                3.741\n",
              "Skew:                           0.139   Prob(JB):                        0.154\n",
              "Kurtosis:                       1.978   Cond. No.                         33.5\n",
              "==============================================================================\n",
              "\n",
              "Notes:\n",
              "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
              "\"\"\""
            ],
            "text/html": [
              "<table class=\"simpletable\">\n",
              "<caption>OLS Regression Results</caption>\n",
              "<tr>\n",
              "  <th>Dep. Variable:</th>    <td>perception_freshness</td> <th>  R-squared:         </th> <td>   0.080</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Model:</th>                     <td>OLS</td>         <th>  Adj. R-squared:    </th> <td>  -0.023</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Method:</th>               <td>Least Squares</td>    <th>  F-statistic:       </th> <td>  0.7756</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Date:</th>               <td>Sun, 03 Mar 2024</td>   <th>  Prob (F-statistic):</th>  <td> 0.625</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Time:</th>                   <td>22:28:10</td>       <th>  Log-Likelihood:    </th> <td> -86.432</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>No. Observations:</th>        <td>    80</td>        <th>  AIC:               </th> <td>   190.9</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Residuals:</th>            <td>    71</td>        <th>  BIC:               </th> <td>   212.3</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Model:</th>                <td>     8</td>        <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Covariance Type:</th>        <td>nonrobust</td>      <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "           <td></td>             <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Intercept</th>          <td>    3.7474</td> <td>    0.537</td> <td>    6.975</td> <td> 0.000</td> <td>    2.676</td> <td>    4.819</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>age_group[T.25-34]</th> <td>    0.0847</td> <td>    0.200</td> <td>    0.423</td> <td> 0.674</td> <td>   -0.315</td> <td>    0.484</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>age_group[T.35-44]</th> <td>   -0.4278</td> <td>    0.400</td> <td>   -1.069</td> <td> 0.289</td> <td>   -1.226</td> <td>    0.370</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>age_group[T.45-54]</th> <td>    0.3900</td> <td>    0.466</td> <td>    0.838</td> <td> 0.405</td> <td>   -0.538</td> <td>    1.318</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>age_group[T.55-64]</th> <td>   -0.4727</td> <td>    0.352</td> <td>   -1.342</td> <td> 0.184</td> <td>   -1.175</td> <td>    0.230</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_1</th>        <td>    0.0964</td> <td>    0.244</td> <td>    0.394</td> <td> 0.694</td> <td>   -0.391</td> <td>    0.583</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_2</th>        <td>    0.1430</td> <td>    0.245</td> <td>    0.584</td> <td> 0.561</td> <td>   -0.346</td> <td>    0.632</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_3</th>        <td>    0.2538</td> <td>    0.260</td> <td>    0.978</td> <td> 0.332</td> <td>   -0.264</td> <td>    0.771</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>choice_freshness</th>   <td>   -0.0013</td> <td>    0.104</td> <td>   -0.013</td> <td> 0.990</td> <td>   -0.208</td> <td>    0.205</td>\n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "  <th>Omnibus:</th>       <td>11.599</td> <th>  Durbin-Watson:     </th> <td>   2.141</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(Omnibus):</th> <td> 0.003</td> <th>  Jarque-Bera (JB):  </th> <td>   3.741</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Skew:</th>          <td> 0.139</td> <th>  Prob(JB):          </th> <td>   0.154</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Kurtosis:</th>      <td> 1.978</td> <th>  Cond. No.          </th> <td>    33.5</td>\n",
              "</tr>\n",
              "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
            ],
            "text/latex": "\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}      & perception\\_freshness & \\textbf{  R-squared:         } &     0.080   \\\\\n\\textbf{Model:}              &          OLS          & \\textbf{  Adj. R-squared:    } &    -0.023   \\\\\n\\textbf{Method:}             &     Least Squares     & \\textbf{  F-statistic:       } &    0.7756   \\\\\n\\textbf{Date:}               &    Sun, 03 Mar 2024   & \\textbf{  Prob (F-statistic):} &    0.625    \\\\\n\\textbf{Time:}               &        22:28:10       & \\textbf{  Log-Likelihood:    } &   -86.432   \\\\\n\\textbf{No. Observations:}   &             80        & \\textbf{  AIC:               } &     190.9   \\\\\n\\textbf{Df Residuals:}       &             71        & \\textbf{  BIC:               } &     212.3   \\\\\n\\textbf{Df Model:}           &              8        & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}    &       nonrobust       & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                             & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{Intercept}           &       3.7474  &        0.537     &     6.975  &         0.000        &        2.676    &        4.819     \\\\\n\\textbf{age\\_group[T.25-34]} &       0.0847  &        0.200     &     0.423  &         0.674        &       -0.315    &        0.484     \\\\\n\\textbf{age\\_group[T.35-44]} &      -0.4278  &        0.400     &    -1.069  &         0.289        &       -1.226    &        0.370     \\\\\n\\textbf{age\\_group[T.45-54]} &       0.3900  &        0.466     &     0.838  &         0.405        &       -0.538    &        1.318     \\\\\n\\textbf{age\\_group[T.55-64]} &      -0.4727  &        0.352     &    -1.342  &         0.184        &       -1.175    &        0.230     \\\\\n\\textbf{Treatment\\_1}        &       0.0964  &        0.244     &     0.394  &         0.694        &       -0.391    &        0.583     \\\\\n\\textbf{Treatment\\_2}        &       0.1430  &        0.245     &     0.584  &         0.561        &       -0.346    &        0.632     \\\\\n\\textbf{Treatment\\_3}        &       0.2538  &        0.260     &     0.978  &         0.332        &       -0.264    &        0.771     \\\\\n\\textbf{choice\\_freshness}   &      -0.0013  &        0.104     &    -0.013  &         0.990        &       -0.208    &        0.205     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Omnibus:}       & 11.599 & \\textbf{  Durbin-Watson:     } &    2.141  \\\\\n\\textbf{Prob(Omnibus):} &  0.003 & \\textbf{  Jarque-Bera (JB):  } &    3.741  \\\\\n\\textbf{Skew:}          &  0.139 & \\textbf{  Prob(JB):          } &    0.154  \\\\\n\\textbf{Kurtosis:}      &  1.978 & \\textbf{  Cond. No.          } &     33.5  \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{OLS Regression Results}\n\\end{center}\n\nNotes: \\newline\n [1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Perception of Nutritional Value"
      ],
      "metadata": {
        "id": "E8-GoTIgP-ho"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model_nutrition = ols('perception_nutrition ~ Treatment_1 + Treatment_2 + Treatment_3', data=data).fit()\n",
        "model_4_summary = model_nutrition.summary()\n",
        "\n",
        "model_4_summary"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 494
        },
        "id": "wIaC2aQcKAmo",
        "outputId": "0d9ac50c-21a6-4eed-c205-318f8ab578b0"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<class 'statsmodels.iolib.summary.Summary'>\n",
              "\"\"\"\n",
              "                             OLS Regression Results                             \n",
              "================================================================================\n",
              "Dep. Variable:     perception_nutrition   R-squared:                       0.011\n",
              "Model:                              OLS   Adj. R-squared:                 -0.029\n",
              "Method:                   Least Squares   F-statistic:                    0.2699\n",
              "Date:                  Sun, 03 Mar 2024   Prob (F-statistic):              0.847\n",
              "Time:                          22:28:10   Log-Likelihood:                -95.073\n",
              "No. Observations:                    80   AIC:                             198.1\n",
              "Df Residuals:                        76   BIC:                             207.7\n",
              "Df Model:                             3                                         \n",
              "Covariance Type:              nonrobust                                         \n",
              "===============================================================================\n",
              "                  coef    std err          t      P>|t|      [0.025      0.975]\n",
              "-------------------------------------------------------------------------------\n",
              "Intercept       3.9500      0.182     21.681      0.000       3.587       4.313\n",
              "Treatment_1     0.0500      0.258      0.194      0.847      -0.463       0.563\n",
              "Treatment_2 -1.471e-15      0.258  -5.71e-15      1.000      -0.513       0.513\n",
              "Treatment_3     0.2000      0.258      0.776      0.440      -0.313       0.713\n",
              "==============================================================================\n",
              "Omnibus:                       13.613   Durbin-Watson:                   2.431\n",
              "Prob(Omnibus):                  0.001   Jarque-Bera (JB):                4.094\n",
              "Skew:                          -0.163   Prob(JB):                        0.129\n",
              "Kurtosis:                       1.941   Cond. No.                         4.79\n",
              "==============================================================================\n",
              "\n",
              "Notes:\n",
              "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
              "\"\"\""
            ],
            "text/html": [
              "<table class=\"simpletable\">\n",
              "<caption>OLS Regression Results</caption>\n",
              "<tr>\n",
              "  <th>Dep. Variable:</th>    <td>perception_nutrition</td> <th>  R-squared:         </th> <td>   0.011</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Model:</th>                     <td>OLS</td>         <th>  Adj. R-squared:    </th> <td>  -0.029</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Method:</th>               <td>Least Squares</td>    <th>  F-statistic:       </th> <td>  0.2699</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Date:</th>               <td>Sun, 03 Mar 2024</td>   <th>  Prob (F-statistic):</th>  <td> 0.847</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Time:</th>                   <td>22:28:10</td>       <th>  Log-Likelihood:    </th> <td> -95.073</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>No. Observations:</th>        <td>    80</td>        <th>  AIC:               </th> <td>   198.1</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Residuals:</th>            <td>    76</td>        <th>  BIC:               </th> <td>   207.7</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Model:</th>                <td>     3</td>        <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Covariance Type:</th>        <td>nonrobust</td>      <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "       <td></td>          <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Intercept</th>   <td>    3.9500</td> <td>    0.182</td> <td>   21.681</td> <td> 0.000</td> <td>    3.587</td> <td>    4.313</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_1</th> <td>    0.0500</td> <td>    0.258</td> <td>    0.194</td> <td> 0.847</td> <td>   -0.463</td> <td>    0.563</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_2</th> <td>-1.471e-15</td> <td>    0.258</td> <td>-5.71e-15</td> <td> 1.000</td> <td>   -0.513</td> <td>    0.513</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_3</th> <td>    0.2000</td> <td>    0.258</td> <td>    0.776</td> <td> 0.440</td> <td>   -0.313</td> <td>    0.713</td>\n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "  <th>Omnibus:</th>       <td>13.613</td> <th>  Durbin-Watson:     </th> <td>   2.431</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(Omnibus):</th> <td> 0.001</td> <th>  Jarque-Bera (JB):  </th> <td>   4.094</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Skew:</th>          <td>-0.163</td> <th>  Prob(JB):          </th> <td>   0.129</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Kurtosis:</th>      <td> 1.941</td> <th>  Cond. No.          </th> <td>    4.79</td>\n",
              "</tr>\n",
              "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
            ],
            "text/latex": "\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}    & perception\\_nutrition & \\textbf{  R-squared:         } &     0.011   \\\\\n\\textbf{Model:}            &          OLS          & \\textbf{  Adj. R-squared:    } &    -0.029   \\\\\n\\textbf{Method:}           &     Least Squares     & \\textbf{  F-statistic:       } &    0.2699   \\\\\n\\textbf{Date:}             &    Sun, 03 Mar 2024   & \\textbf{  Prob (F-statistic):} &    0.847    \\\\\n\\textbf{Time:}             &        22:28:10       & \\textbf{  Log-Likelihood:    } &   -95.073   \\\\\n\\textbf{No. Observations:} &             80        & \\textbf{  AIC:               } &     198.1   \\\\\n\\textbf{Df Residuals:}     &             76        & \\textbf{  BIC:               } &     207.7   \\\\\n\\textbf{Df Model:}         &              3        & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}  &       nonrobust       & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                      & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{Intercept}    &       3.9500  &        0.182     &    21.681  &         0.000        &        3.587    &        4.313     \\\\\n\\textbf{Treatment\\_1} &       0.0500  &        0.258     &     0.194  &         0.847        &       -0.463    &        0.563     \\\\\n\\textbf{Treatment\\_2} &   -1.471e-15  &        0.258     & -5.71e-15  &         1.000        &       -0.513    &        0.513     \\\\\n\\textbf{Treatment\\_3} &       0.2000  &        0.258     &     0.776  &         0.440        &       -0.313    &        0.713     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Omnibus:}       & 13.613 & \\textbf{  Durbin-Watson:     } &    2.431  \\\\\n\\textbf{Prob(Omnibus):} &  0.001 & \\textbf{  Jarque-Bera (JB):  } &    4.094  \\\\\n\\textbf{Skew:}          & -0.163 & \\textbf{  Prob(JB):          } &    0.129  \\\\\n\\textbf{Kurtosis:}      &  1.941 & \\textbf{  Cond. No.          } &     4.79  \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{OLS Regression Results}\n\\end{center}\n\nNotes: \\newline\n [1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Perception of Quality"
      ],
      "metadata": {
        "id": "qULebuaFQWkL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model_quality = ols('perception_quality ~ Treatment_1 + Treatment_2 + Treatment_3', data=data).fit()\n",
        "model_5_summary = model_quality.summary()\n",
        "\n",
        "model_5_summary"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 494
        },
        "id": "Fj5Re3unQYna",
        "outputId": "376e2b1e-d4b6-4676-81bb-4cb577178188"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<class 'statsmodels.iolib.summary.Summary'>\n",
              "\"\"\"\n",
              "                            OLS Regression Results                            \n",
              "==============================================================================\n",
              "Dep. Variable:     perception_quality   R-squared:                       0.062\n",
              "Model:                            OLS   Adj. R-squared:                  0.025\n",
              "Method:                 Least Squares   F-statistic:                     1.681\n",
              "Date:                Sun, 03 Mar 2024   Prob (F-statistic):              0.178\n",
              "Time:                        22:28:10   Log-Likelihood:                -87.020\n",
              "No. Observations:                  80   AIC:                             182.0\n",
              "Df Residuals:                      76   BIC:                             191.6\n",
              "Df Model:                           3                                         \n",
              "Covariance Type:            nonrobust                                         \n",
              "===============================================================================\n",
              "                  coef    std err          t      P>|t|      [0.025      0.975]\n",
              "-------------------------------------------------------------------------------\n",
              "Intercept       3.8500      0.165     23.371      0.000       3.522       4.178\n",
              "Treatment_1     0.3500      0.233      1.502      0.137      -0.114       0.814\n",
              "Treatment_2     0.2000      0.233      0.858      0.393      -0.264       0.664\n",
              "Treatment_3     0.5000      0.233      2.146      0.035       0.036       0.964\n",
              "==============================================================================\n",
              "Omnibus:                       13.809   Durbin-Watson:                   2.282\n",
              "Prob(Omnibus):                  0.001   Jarque-Bera (JB):                3.989\n",
              "Skew:                          -0.123   Prob(JB):                        0.136\n",
              "Kurtosis:                       1.934   Cond. No.                         4.79\n",
              "==============================================================================\n",
              "\n",
              "Notes:\n",
              "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
              "\"\"\""
            ],
            "text/html": [
              "<table class=\"simpletable\">\n",
              "<caption>OLS Regression Results</caption>\n",
              "<tr>\n",
              "  <th>Dep. Variable:</th>    <td>perception_quality</td> <th>  R-squared:         </th> <td>   0.062</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Model:</th>                    <td>OLS</td>        <th>  Adj. R-squared:    </th> <td>   0.025</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Method:</th>              <td>Least Squares</td>   <th>  F-statistic:       </th> <td>   1.681</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Date:</th>              <td>Sun, 03 Mar 2024</td>  <th>  Prob (F-statistic):</th>  <td> 0.178</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Time:</th>                  <td>22:28:10</td>      <th>  Log-Likelihood:    </th> <td> -87.020</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>No. Observations:</th>       <td>    80</td>       <th>  AIC:               </th> <td>   182.0</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Residuals:</th>           <td>    76</td>       <th>  BIC:               </th> <td>   191.6</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Model:</th>               <td>     3</td>       <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Covariance Type:</th>       <td>nonrobust</td>     <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "       <td></td>          <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Intercept</th>   <td>    3.8500</td> <td>    0.165</td> <td>   23.371</td> <td> 0.000</td> <td>    3.522</td> <td>    4.178</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_1</th> <td>    0.3500</td> <td>    0.233</td> <td>    1.502</td> <td> 0.137</td> <td>   -0.114</td> <td>    0.814</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_2</th> <td>    0.2000</td> <td>    0.233</td> <td>    0.858</td> <td> 0.393</td> <td>   -0.264</td> <td>    0.664</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_3</th> <td>    0.5000</td> <td>    0.233</td> <td>    2.146</td> <td> 0.035</td> <td>    0.036</td> <td>    0.964</td>\n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "  <th>Omnibus:</th>       <td>13.809</td> <th>  Durbin-Watson:     </th> <td>   2.282</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(Omnibus):</th> <td> 0.001</td> <th>  Jarque-Bera (JB):  </th> <td>   3.989</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Skew:</th>          <td>-0.123</td> <th>  Prob(JB):          </th> <td>   0.136</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Kurtosis:</th>      <td> 1.934</td> <th>  Cond. No.          </th> <td>    4.79</td>\n",
              "</tr>\n",
              "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
            ],
            "text/latex": "\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}    & perception\\_quality & \\textbf{  R-squared:         } &     0.062   \\\\\n\\textbf{Model:}            &         OLS         & \\textbf{  Adj. R-squared:    } &     0.025   \\\\\n\\textbf{Method:}           &    Least Squares    & \\textbf{  F-statistic:       } &     1.681   \\\\\n\\textbf{Date:}             &   Sun, 03 Mar 2024  & \\textbf{  Prob (F-statistic):} &    0.178    \\\\\n\\textbf{Time:}             &       22:28:10      & \\textbf{  Log-Likelihood:    } &   -87.020   \\\\\n\\textbf{No. Observations:} &            80       & \\textbf{  AIC:               } &     182.0   \\\\\n\\textbf{Df Residuals:}     &            76       & \\textbf{  BIC:               } &     191.6   \\\\\n\\textbf{Df Model:}         &             3       & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}  &      nonrobust      & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                      & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{Intercept}    &       3.8500  &        0.165     &    23.371  &         0.000        &        3.522    &        4.178     \\\\\n\\textbf{Treatment\\_1} &       0.3500  &        0.233     &     1.502  &         0.137        &       -0.114    &        0.814     \\\\\n\\textbf{Treatment\\_2} &       0.2000  &        0.233     &     0.858  &         0.393        &       -0.264    &        0.664     \\\\\n\\textbf{Treatment\\_3} &       0.5000  &        0.233     &     2.146  &         0.035        &        0.036    &        0.964     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Omnibus:}       & 13.809 & \\textbf{  Durbin-Watson:     } &    2.282  \\\\\n\\textbf{Prob(Omnibus):} &  0.001 & \\textbf{  Jarque-Bera (JB):  } &    3.989  \\\\\n\\textbf{Skew:}          & -0.123 & \\textbf{  Prob(JB):          } &    0.136  \\\\\n\\textbf{Kurtosis:}      &  1.934 & \\textbf{  Cond. No.          } &     4.79  \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{OLS Regression Results}\n\\end{center}\n\nNotes: \\newline\n [1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Perception of Taste (Sour, Sweet and Spicy)"
      ],
      "metadata": {
        "id": "2cYS77JSQ6dT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model_sour = ols('taste_sour ~ Treatment_1 + Treatment_2 + Treatment_3', data=data).fit()\n",
        "model_6_summary = model_sour.summary()\n",
        "\n",
        "model_6_summary"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 494
        },
        "id": "1JLpZe4jQkg2",
        "outputId": "4da11feb-719d-450e-d4e4-5e62e607ba74"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<class 'statsmodels.iolib.summary.Summary'>\n",
              "\"\"\"\n",
              "                            OLS Regression Results                            \n",
              "==============================================================================\n",
              "Dep. Variable:             taste_sour   R-squared:                       0.072\n",
              "Model:                            OLS   Adj. R-squared:                  0.036\n",
              "Method:                 Least Squares   F-statistic:                     1.974\n",
              "Date:                Sun, 03 Mar 2024   Prob (F-statistic):              0.125\n",
              "Time:                        22:28:10   Log-Likelihood:                -103.90\n",
              "No. Observations:                  80   AIC:                             215.8\n",
              "Df Residuals:                      76   BIC:                             225.3\n",
              "Df Model:                           3                                         \n",
              "Covariance Type:            nonrobust                                         \n",
              "===============================================================================\n",
              "                  coef    std err          t      P>|t|      [0.025      0.975]\n",
              "-------------------------------------------------------------------------------\n",
              "Intercept       2.7000      0.203     13.273      0.000       2.295       3.105\n",
              "Treatment_1     0.1500      0.288      0.521      0.604      -0.423       0.723\n",
              "Treatment_2    -0.2500      0.288     -0.869      0.388      -0.823       0.323\n",
              "Treatment_3    -0.5000      0.288     -1.738      0.086      -1.073       0.073\n",
              "==============================================================================\n",
              "Omnibus:                        1.851   Durbin-Watson:                   2.171\n",
              "Prob(Omnibus):                  0.396   Jarque-Bera (JB):                1.680\n",
              "Skew:                          -0.239   Prob(JB):                        0.432\n",
              "Kurtosis:                       2.476   Cond. No.                         4.79\n",
              "==============================================================================\n",
              "\n",
              "Notes:\n",
              "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
              "\"\"\""
            ],
            "text/html": [
              "<table class=\"simpletable\">\n",
              "<caption>OLS Regression Results</caption>\n",
              "<tr>\n",
              "  <th>Dep. Variable:</th>       <td>taste_sour</td>    <th>  R-squared:         </th> <td>   0.072</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.036</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   1.974</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Date:</th>             <td>Sun, 03 Mar 2024</td> <th>  Prob (F-statistic):</th>  <td> 0.125</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Time:</th>                 <td>22:28:10</td>     <th>  Log-Likelihood:    </th> <td> -103.90</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>No. Observations:</th>      <td>    80</td>      <th>  AIC:               </th> <td>   215.8</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Residuals:</th>          <td>    76</td>      <th>  BIC:               </th> <td>   225.3</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Model:</th>              <td>     3</td>      <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "       <td></td>          <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Intercept</th>   <td>    2.7000</td> <td>    0.203</td> <td>   13.273</td> <td> 0.000</td> <td>    2.295</td> <td>    3.105</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_1</th> <td>    0.1500</td> <td>    0.288</td> <td>    0.521</td> <td> 0.604</td> <td>   -0.423</td> <td>    0.723</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_2</th> <td>   -0.2500</td> <td>    0.288</td> <td>   -0.869</td> <td> 0.388</td> <td>   -0.823</td> <td>    0.323</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_3</th> <td>   -0.5000</td> <td>    0.288</td> <td>   -1.738</td> <td> 0.086</td> <td>   -1.073</td> <td>    0.073</td>\n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "  <th>Omnibus:</th>       <td> 1.851</td> <th>  Durbin-Watson:     </th> <td>   2.171</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(Omnibus):</th> <td> 0.396</td> <th>  Jarque-Bera (JB):  </th> <td>   1.680</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Skew:</th>          <td>-0.239</td> <th>  Prob(JB):          </th> <td>   0.432</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Kurtosis:</th>      <td> 2.476</td> <th>  Cond. No.          </th> <td>    4.79</td>\n",
              "</tr>\n",
              "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
            ],
            "text/latex": "\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}    &   taste\\_sour    & \\textbf{  R-squared:         } &     0.072   \\\\\n\\textbf{Model:}            &       OLS        & \\textbf{  Adj. R-squared:    } &     0.036   \\\\\n\\textbf{Method:}           &  Least Squares   & \\textbf{  F-statistic:       } &     1.974   \\\\\n\\textbf{Date:}             & Sun, 03 Mar 2024 & \\textbf{  Prob (F-statistic):} &    0.125    \\\\\n\\textbf{Time:}             &     22:28:10     & \\textbf{  Log-Likelihood:    } &   -103.90   \\\\\n\\textbf{No. Observations:} &          80      & \\textbf{  AIC:               } &     215.8   \\\\\n\\textbf{Df Residuals:}     &          76      & \\textbf{  BIC:               } &     225.3   \\\\\n\\textbf{Df Model:}         &           3      & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}  &    nonrobust     & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                      & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{Intercept}    &       2.7000  &        0.203     &    13.273  &         0.000        &        2.295    &        3.105     \\\\\n\\textbf{Treatment\\_1} &       0.1500  &        0.288     &     0.521  &         0.604        &       -0.423    &        0.723     \\\\\n\\textbf{Treatment\\_2} &      -0.2500  &        0.288     &    -0.869  &         0.388        &       -0.823    &        0.323     \\\\\n\\textbf{Treatment\\_3} &      -0.5000  &        0.288     &    -1.738  &         0.086        &       -1.073    &        0.073     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Omnibus:}       &  1.851 & \\textbf{  Durbin-Watson:     } &    2.171  \\\\\n\\textbf{Prob(Omnibus):} &  0.396 & \\textbf{  Jarque-Bera (JB):  } &    1.680  \\\\\n\\textbf{Skew:}          & -0.239 & \\textbf{  Prob(JB):          } &    0.432  \\\\\n\\textbf{Kurtosis:}      &  2.476 & \\textbf{  Cond. No.          } &     4.79  \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{OLS Regression Results}\n\\end{center}\n\nNotes: \\newline\n [1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model_sweet = ols('taste_sweet ~ Treatment_1 + Treatment_2 + Treatment_3', data=data).fit()\n",
        "model_7_summary = model_sweet.summary()\n",
        "\n",
        "model_7_summary"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 494
        },
        "id": "liJBhjYeQs5E",
        "outputId": "a7e0cc37-b930-4898-9eb8-d05a859baea1"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<class 'statsmodels.iolib.summary.Summary'>\n",
              "\"\"\"\n",
              "                            OLS Regression Results                            \n",
              "==============================================================================\n",
              "Dep. Variable:            taste_sweet   R-squared:                       0.081\n",
              "Model:                            OLS   Adj. R-squared:                  0.045\n",
              "Method:                 Least Squares   F-statistic:                     2.245\n",
              "Date:                Sun, 03 Mar 2024   Prob (F-statistic):             0.0898\n",
              "Time:                        22:28:10   Log-Likelihood:                -107.74\n",
              "No. Observations:                  80   AIC:                             223.5\n",
              "Df Residuals:                      76   BIC:                             233.0\n",
              "Df Model:                           3                                         \n",
              "Covariance Type:            nonrobust                                         \n",
              "===============================================================================\n",
              "                  coef    std err          t      P>|t|      [0.025      0.975]\n",
              "-------------------------------------------------------------------------------\n",
              "Intercept       2.4500      0.213     11.478      0.000       2.025       2.875\n",
              "Treatment_1    -0.2500      0.302     -0.828      0.410      -0.851       0.351\n",
              "Treatment_2     0.4000      0.302      1.325      0.189      -0.201       1.001\n",
              "Treatment_3    -0.3000      0.302     -0.994      0.323      -0.901       0.301\n",
              "==============================================================================\n",
              "Omnibus:                        1.189   Durbin-Watson:                   1.487\n",
              "Prob(Omnibus):                  0.552   Jarque-Bera (JB):                1.030\n",
              "Skew:                          -0.037   Prob(JB):                        0.597\n",
              "Kurtosis:                       2.449   Cond. No.                         4.79\n",
              "==============================================================================\n",
              "\n",
              "Notes:\n",
              "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
              "\"\"\""
            ],
            "text/html": [
              "<table class=\"simpletable\">\n",
              "<caption>OLS Regression Results</caption>\n",
              "<tr>\n",
              "  <th>Dep. Variable:</th>       <td>taste_sweet</td>   <th>  R-squared:         </th> <td>   0.081</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.045</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   2.245</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Date:</th>             <td>Sun, 03 Mar 2024</td> <th>  Prob (F-statistic):</th>  <td>0.0898</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Time:</th>                 <td>22:28:10</td>     <th>  Log-Likelihood:    </th> <td> -107.74</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>No. Observations:</th>      <td>    80</td>      <th>  AIC:               </th> <td>   223.5</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Residuals:</th>          <td>    76</td>      <th>  BIC:               </th> <td>   233.0</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Model:</th>              <td>     3</td>      <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "       <td></td>          <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Intercept</th>   <td>    2.4500</td> <td>    0.213</td> <td>   11.478</td> <td> 0.000</td> <td>    2.025</td> <td>    2.875</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_1</th> <td>   -0.2500</td> <td>    0.302</td> <td>   -0.828</td> <td> 0.410</td> <td>   -0.851</td> <td>    0.351</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_2</th> <td>    0.4000</td> <td>    0.302</td> <td>    1.325</td> <td> 0.189</td> <td>   -0.201</td> <td>    1.001</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_3</th> <td>   -0.3000</td> <td>    0.302</td> <td>   -0.994</td> <td> 0.323</td> <td>   -0.901</td> <td>    0.301</td>\n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "  <th>Omnibus:</th>       <td> 1.189</td> <th>  Durbin-Watson:     </th> <td>   1.487</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(Omnibus):</th> <td> 0.552</td> <th>  Jarque-Bera (JB):  </th> <td>   1.030</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Skew:</th>          <td>-0.037</td> <th>  Prob(JB):          </th> <td>   0.597</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Kurtosis:</th>      <td> 2.449</td> <th>  Cond. No.          </th> <td>    4.79</td>\n",
              "</tr>\n",
              "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
            ],
            "text/latex": "\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}    &   taste\\_sweet   & \\textbf{  R-squared:         } &     0.081   \\\\\n\\textbf{Model:}            &       OLS        & \\textbf{  Adj. R-squared:    } &     0.045   \\\\\n\\textbf{Method:}           &  Least Squares   & \\textbf{  F-statistic:       } &     2.245   \\\\\n\\textbf{Date:}             & Sun, 03 Mar 2024 & \\textbf{  Prob (F-statistic):} &   0.0898    \\\\\n\\textbf{Time:}             &     22:28:10     & \\textbf{  Log-Likelihood:    } &   -107.74   \\\\\n\\textbf{No. Observations:} &          80      & \\textbf{  AIC:               } &     223.5   \\\\\n\\textbf{Df Residuals:}     &          76      & \\textbf{  BIC:               } &     233.0   \\\\\n\\textbf{Df Model:}         &           3      & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}  &    nonrobust     & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                      & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{Intercept}    &       2.4500  &        0.213     &    11.478  &         0.000        &        2.025    &        2.875     \\\\\n\\textbf{Treatment\\_1} &      -0.2500  &        0.302     &    -0.828  &         0.410        &       -0.851    &        0.351     \\\\\n\\textbf{Treatment\\_2} &       0.4000  &        0.302     &     1.325  &         0.189        &       -0.201    &        1.001     \\\\\n\\textbf{Treatment\\_3} &      -0.3000  &        0.302     &    -0.994  &         0.323        &       -0.901    &        0.301     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Omnibus:}       &  1.189 & \\textbf{  Durbin-Watson:     } &    1.487  \\\\\n\\textbf{Prob(Omnibus):} &  0.552 & \\textbf{  Jarque-Bera (JB):  } &    1.030  \\\\\n\\textbf{Skew:}          & -0.037 & \\textbf{  Prob(JB):          } &    0.597  \\\\\n\\textbf{Kurtosis:}      &  2.449 & \\textbf{  Cond. No.          } &     4.79  \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{OLS Regression Results}\n\\end{center}\n\nNotes: \\newline\n [1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model_spicy = ols('taste_spicy ~ Treatment_1 + Treatment_2 + Treatment_3', data=data).fit()\n",
        "model_8_summary = model_spicy.summary()\n",
        "\n",
        "model_8_summary"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 494
        },
        "id": "XV-gWL8wQx5Y",
        "outputId": "145af0a2-d3a4-43cf-c874-0a5737eb34f0"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<class 'statsmodels.iolib.summary.Summary'>\n",
              "\"\"\"\n",
              "                            OLS Regression Results                            \n",
              "==============================================================================\n",
              "Dep. Variable:            taste_spicy   R-squared:                       0.223\n",
              "Model:                            OLS   Adj. R-squared:                  0.193\n",
              "Method:                 Least Squares   F-statistic:                     7.279\n",
              "Date:                Sun, 03 Mar 2024   Prob (F-statistic):           0.000235\n",
              "Time:                        22:28:11   Log-Likelihood:                -106.39\n",
              "No. Observations:                  80   AIC:                             220.8\n",
              "Df Residuals:                      76   BIC:                             230.3\n",
              "Df Model:                           3                                         \n",
              "Covariance Type:            nonrobust                                         \n",
              "===============================================================================\n",
              "                  coef    std err          t      P>|t|      [0.025      0.975]\n",
              "-------------------------------------------------------------------------------\n",
              "Intercept       2.0000      0.210      9.530      0.000       1.582       2.418\n",
              "Treatment_1     0.9500      0.297      3.201      0.002       0.359       1.541\n",
              "Treatment_2     0.2000      0.297      0.674      0.502      -0.391       0.791\n",
              "Treatment_3    -0.4000      0.297     -1.348      0.182      -0.991       0.191\n",
              "==============================================================================\n",
              "Omnibus:                        2.068   Durbin-Watson:                   2.114\n",
              "Prob(Omnibus):                  0.356   Jarque-Bera (JB):                1.996\n",
              "Skew:                           0.310   Prob(JB):                        0.369\n",
              "Kurtosis:                       2.538   Cond. No.                         4.79\n",
              "==============================================================================\n",
              "\n",
              "Notes:\n",
              "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
              "\"\"\""
            ],
            "text/html": [
              "<table class=\"simpletable\">\n",
              "<caption>OLS Regression Results</caption>\n",
              "<tr>\n",
              "  <th>Dep. Variable:</th>       <td>taste_spicy</td>   <th>  R-squared:         </th> <td>   0.223</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.193</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   7.279</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Date:</th>             <td>Sun, 03 Mar 2024</td> <th>  Prob (F-statistic):</th> <td>0.000235</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Time:</th>                 <td>22:28:11</td>     <th>  Log-Likelihood:    </th> <td> -106.39</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>No. Observations:</th>      <td>    80</td>      <th>  AIC:               </th> <td>   220.8</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Residuals:</th>          <td>    76</td>      <th>  BIC:               </th> <td>   230.3</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Model:</th>              <td>     3</td>      <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "       <td></td>          <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Intercept</th>   <td>    2.0000</td> <td>    0.210</td> <td>    9.530</td> <td> 0.000</td> <td>    1.582</td> <td>    2.418</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_1</th> <td>    0.9500</td> <td>    0.297</td> <td>    3.201</td> <td> 0.002</td> <td>    0.359</td> <td>    1.541</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_2</th> <td>    0.2000</td> <td>    0.297</td> <td>    0.674</td> <td> 0.502</td> <td>   -0.391</td> <td>    0.791</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Treatment_3</th> <td>   -0.4000</td> <td>    0.297</td> <td>   -1.348</td> <td> 0.182</td> <td>   -0.991</td> <td>    0.191</td>\n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "  <th>Omnibus:</th>       <td> 2.068</td> <th>  Durbin-Watson:     </th> <td>   2.114</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(Omnibus):</th> <td> 0.356</td> <th>  Jarque-Bera (JB):  </th> <td>   1.996</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Skew:</th>          <td> 0.310</td> <th>  Prob(JB):          </th> <td>   0.369</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Kurtosis:</th>      <td> 2.538</td> <th>  Cond. No.          </th> <td>    4.79</td>\n",
              "</tr>\n",
              "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
            ],
            "text/latex": "\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}    &   taste\\_spicy   & \\textbf{  R-squared:         } &     0.223   \\\\\n\\textbf{Model:}            &       OLS        & \\textbf{  Adj. R-squared:    } &     0.193   \\\\\n\\textbf{Method:}           &  Least Squares   & \\textbf{  F-statistic:       } &     7.279   \\\\\n\\textbf{Date:}             & Sun, 03 Mar 2024 & \\textbf{  Prob (F-statistic):} &  0.000235   \\\\\n\\textbf{Time:}             &     22:28:11     & \\textbf{  Log-Likelihood:    } &   -106.39   \\\\\n\\textbf{No. Observations:} &          80      & \\textbf{  AIC:               } &     220.8   \\\\\n\\textbf{Df Residuals:}     &          76      & \\textbf{  BIC:               } &     230.3   \\\\\n\\textbf{Df Model:}         &           3      & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}  &    nonrobust     & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                      & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{Intercept}    &       2.0000  &        0.210     &     9.530  &         0.000        &        1.582    &        2.418     \\\\\n\\textbf{Treatment\\_1} &       0.9500  &        0.297     &     3.201  &         0.002        &        0.359    &        1.541     \\\\\n\\textbf{Treatment\\_2} &       0.2000  &        0.297     &     0.674  &         0.502        &       -0.391    &        0.791     \\\\\n\\textbf{Treatment\\_3} &      -0.4000  &        0.297     &    -1.348  &         0.182        &       -0.991    &        0.191     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Omnibus:}       &  2.068 & \\textbf{  Durbin-Watson:     } &    2.114  \\\\\n\\textbf{Prob(Omnibus):} &  0.356 & \\textbf{  Jarque-Bera (JB):  } &    1.996  \\\\\n\\textbf{Skew:}          &  0.310 & \\textbf{  Prob(JB):          } &    0.369  \\\\\n\\textbf{Kurtosis:}      &  2.538 & \\textbf{  Cond. No.          } &     4.79  \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{OLS Regression Results}\n\\end{center}\n\nNotes: \\newline\n [1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "1NCrQ2CSK9WM"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#T Test for \"Wild Medley\" vs Best Alternative"
      ],
      "metadata": {
        "id": "mYvXB7v1To1D"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.stats import ttest_ind\n",
        "control_group = data[data['Treatment'] == 0]['probability_purchase']\n",
        "\n",
        "supergreens_group = data[data['Treatment'] == 3]['probability_purchase']\n",
        "\n",
        "t_stat, p_value = ttest_ind(control_group, supergreens_group, equal_var=False)\n",
        "\n",
        "print(f'T-statistic: {t_stat}, P-value: {p_value}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fPhpY5TLbxHl",
        "outputId": "f91d3a00-7d19-4e41-808a-48afac2bde7b"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "T-statistic: -4.082686008188651, P-value: 0.0003062406584907048\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "spring_mix_group = data[data['Treatment'] == 2]['probability_purchase']\n",
        "\n",
        "supergreens_group = data[data['Treatment'] == 3]['probability_purchase']\n",
        "\n",
        "t_stat, p_value = ttest_ind(spring_mix_group, supergreens_group, equal_var=False)\n",
        "\n",
        "print(f'T-statistic: {t_stat}, P-value: {p_value}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fYS5OSh2TtBl",
        "outputId": "2ee8cafc-ae4f-4224-a6df-c6ac8e3b8aec"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "T-statistic: -1.5785446711096045, P-value: 0.12411518002437036\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "cpt3HohMTtYu"
      },
      "execution_count": 24,
      "outputs": []
    }
  ]
}